// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String?   @unique
  emailVerified Boolean   @default(false)
  name          String?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt // Добавляем "?" для nullable

  // Дополнительные поля для локальной аутентификации (если нужна)
  passwordHash      String?   @db.VarChar(255)
  resetToken        String?
  resetTokenExpires DateTime?
}

model Account {
  id                 String    @id @default(uuid())
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider           String // 'google', 'github' и т.д.
  providerAccountId  String // ID пользователя у провайдера
  providerType       String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  tokenType          String?
  scope              String?
  idToken            String?   @db.Text
  sessionState       String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  MODERATOR
}
